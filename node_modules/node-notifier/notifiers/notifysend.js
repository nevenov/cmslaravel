/**
 * Node.js wrapper for "notify-send".
 */
<<<<<<< HEAD
var os = require('os'),
    which = require('which'),
    utils = require('../lib/utils'),
    cloneDeep = require('lodash.clonedeep');
=======
var os = require('os');
var which = require('which');
var utils = require('../lib/utils');
>>>>>>> dev

var EventEmitter = require('events').EventEmitter;
var util = require('util');

<<<<<<< HEAD
var notifier = 'notify-send', hasNotifier = void 0;

module.exports = NotifySend;

function NotifySend (options) {
  options = cloneDeep(options || {});
=======
var notifier = 'notify-send';
var hasNotifier = void 0;

module.exports = NotifySend;

function NotifySend(options) {
  options = utils.clone(options || {});
>>>>>>> dev
  if (!(this instanceof NotifySend)) {
    return new NotifySend(options);
  }

  this.options = options;

  EventEmitter.call(this);
}
util.inherits(NotifySend, EventEmitter);

<<<<<<< HEAD
NotifySend.prototype.notify = function (options, callback) {
  options = cloneDeep(options || {});
  callback = callback || function () {};

  if (typeof options === 'string') options = {
      title: 'node-notifier',
      message: options
  };
=======
function noop() {}
NotifySend.prototype.notify = function(options, callback) {
  options = utils.clone(options || {});
  callback = callback || noop;

  if (typeof callback !== 'function') {
    throw new TypeError(
      'The second argument must be a function callback. You have passed ' +
        typeof callback
    );
  }

  if (typeof options === 'string') {
    options = { title: 'node-notifier', message: options };
  }
>>>>>>> dev

  if (!options.message) {
    callback(new Error('Message is required.'));
    return this;
  }

<<<<<<< HEAD
  if (os.type() !== 'Linux') {
    callback(new Error('Only supported on Linux systems'));
=======
  if (os.type() !== 'Linux' && !os.type().match(/BSD$/)) {
    callback(new Error('Only supported on Linux and *BSD systems'));
>>>>>>> dev
    return this;
  }

  if (hasNotifier === false) {
    callback(new Error('notify-send must be installed on the system.'));
    return this;
  }

  if (hasNotifier || !!this.options.suppressOsdCheck) {
    doNotification(options, callback);
    return this;
  }

  try {
    hasNotifier = !!which.sync(notifier);
    doNotification(options, callback);
  } catch (err) {
    hasNotifier = false;
    return callback(err);
<<<<<<< HEAD
  };
=======
  }
>>>>>>> dev

  return this;
};

<<<<<<< HEAD
var allowedArguments = [
  "urgency",
  "expire-time",
  "icon",
  "category",
  "hint"
];

function doNotification (options, callback) {
=======
var allowedArguments = ['urgency', 'expire-time', 'icon', 'category', 'hint'];

function doNotification(options, callback) {
>>>>>>> dev
  var initial, argsList;

  options = utils.mapToNotifySend(options);
  options.title = options.title || 'Node Notification:';

  initial = [options.title, options.message];
  delete options.title;
  delete options.message;

  argsList = utils.constructArgumentList(options, {
    initial: initial,
    keyExtra: '-',
    allowedArguments: allowedArguments
  });

  utils.command(notifier, argsList, callback);
}
